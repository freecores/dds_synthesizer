% general purpose generator for creating LUTs in VHDL

function generate_vhdl_lut(lut_name, input_name, input_width, output_name, output_width, functionhandle)
comment = '-- This file is automatically generated by a matlab script \n--\n-- Do not modify directly!\n--\n\n';
vhdl_header = 'library ieee;\nuse ieee.std_logic_1164.all;\nuse IEEE.STD_LOGIC_arith.all;\nuse IEEE.STD_LOGIC_unsigned.all;\n\n';
package_header = 'package sine_lut_pkg is\n\n';
type_definition = sprintf('type lut_type is array(0 to 2**(%s-2)-1) of std_logic_vector(ampl_width-1 downto 0);\n\n',input_name);
lut_def_start = sprintf('	constant %s : lut_type := (\n',lut_name);
lut_def_end = '	);\n\n';


vhdl_end = 'end sine_lut_pkg;\n\npackage body sine_lut_pkg is\nend sine_lut_pkg;';
constant_definitions = sprintf('constant %s : integer := %d;\nconstant %s : integer := %d;\n\n',input_name, input_width,output_name, output_width);

filename = sprintf('%s_%d_x_%d_pkg.vhd',lut_name,phase_width,ampl_width);
fid=fopen(filename,'w+');

fprintf(fid, comment);
fprintf(fid, vhdl_header);
fprintf(fid, package_header);
fprintf(fid, constant_definitions);
fprintf(fid, type_definition);
fprintf(fid, lut_def_start);

for i=1:2^(input_width-2)-1
    fprintf(fid, '    conv_std_logic_vector(%d,ampl_width),\n',round(2^(ampl_width-1)*functionhandle(i)));
end;
fprintf(fid, '    conv_std_logic_vector(%d,ampl_width)\n',round(2^(ampl_width-1)*functionhandle(i)));

fprintf(fid, lut_def_end);
fprintf(fid, vhdl_end);


fclose(fid);